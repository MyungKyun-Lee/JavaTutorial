* [수정자]를 두 그룹으로 나눔
- 액세스 수정자 - 액세스 수준을 제어합니다.
- 비 액세스 수정자 - 액세스 수준을 제어하지 않지만 다른 기능을 제공합니다.

* [접근 수정자]
- 클래스 의 경우
  -> public : 클래스는 다른 클래스에서도 액세스할 수 있습니다
  -> default : 클래스는 동일한 패키지의 클래스만 액세스할 수 있습니다. (지정하지 않을 때 사용)

- 속성, 메서드 및 생성자 의 경우
  -> public : 코드는 모든 클래스에 액세스할 수 있습니다
  -> private : 코드는 선언된 클래스 내에서만 액세스할 수 있습니다
  -> default : 코드는 동일한 패키지로만 액세스할 수 있습니다.  (지정하지 않을 때 사용)
  -> protected : 코드는 동일한 패키지 및 하위 클래스에서 액세스할 수 있습니다. 

* [비접근 수정자]
- 클래스 의 경우
  -> final : 클래스는 다른 클래스에서 상속할 수 없습니다
  -> abstract : 클래스를 사용하여 개체를 만들 수 없습니다 
                   (추상 클래스에 액세스하려면 다른 클래스에서 상속해야 합니다.)

- 속성과 메서드 의 경우
  -> final : 재정의하거나 수정할 수 없습니다
  -> static : 개체가 아닌 클래스에 속합니다
  -> abstract : 추상 클래스에서만 사용할 수 있으며 메서드에만 사용할 수 있습니다. 
                  이 방법에는 추상 보이드 run()과 같은 바디가 없습니다.; 본문은 하위 클래스에서 상속됨(에서 상속됨)하여 제공됩니다. 상속 및 추상화에 대한 자세한 내용은 상속 및 추상화 챕터에서 확인할 수 있습니다
  -> transient : 속성 및 메서드가 포함된 개체를 직렬화할 때 건너뛸 수 있습니다
  -> synchronized : 메서드는 한 번에 하나의 스레드로만 액세스할 수 있습니다
  -> volatile : 속성의 값은 스레드 로컬로 캐시되지 않으며 항상 "메인 메모리"에서 읽힙니다